/*
 * Formula D
 * Simple API for a Formula D AI server.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package fi.relex.model.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fi.relex.model.model.Node;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * A valid move a player can take containing the identifier of the node and what repercussions there will be for choosing that
 */
@ApiModel(description = "A valid move a player can take containing the identifier of the node and what repercussions there will be for choosing that")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-13T23:19:30.736+03:00")
public class ValidMove {
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    START("START"),
    
    STRAIGHT("STRAIGHT"),
    
    CURVE_1("CURVE_1"),
    
    CURVE_2("CURVE_2"),
    
    CURVE_3("CURVE_3"),
    
    FINISH("FINISH");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("nodeId")
  private Integer nodeId = null;

  @SerializedName("overshoot")
  private Integer overshoot = null;

  @SerializedName("braking")
  private Integer braking = null;

  public ValidMove type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(required = true, value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ValidMove nodeId(Integer nodeId) {
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getNodeId() {
    return nodeId;
  }

  public void setNodeId(Integer nodeId) {
    this.nodeId = nodeId;
  }

  public ValidMove overshoot(Integer overshoot) {
    this.overshoot = overshoot;
    return this;
  }

   /**
   * Get overshoot
   * minimum: 0
   * @return overshoot
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getOvershoot() {
    return overshoot;
  }

  public void setOvershoot(Integer overshoot) {
    this.overshoot = overshoot;
  }

  public ValidMove braking(Integer braking) {
    this.braking = braking;
    return this;
  }

   /**
   * Get braking
   * minimum: 0
   * @return braking
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getBraking() {
    return braking;
  }

  public void setBraking(Integer braking) {
    this.braking = braking;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidMove validMove = (ValidMove) o;
    return Objects.equals(this.type, validMove.type) &&
        Objects.equals(this.nodeId, validMove.nodeId) &&
        Objects.equals(this.overshoot, validMove.overshoot) &&
        Objects.equals(this.braking, validMove.braking);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, nodeId, overshoot, braking);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidMove {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    overshoot: ").append(toIndentedString(overshoot)).append("\n");
    sb.append("    braking: ").append(toIndentedString(braking)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

