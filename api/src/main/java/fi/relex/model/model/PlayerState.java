/*
 * Formula D
 * Simple API for a Formula D AI server.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package fi.relex.model.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fi.relex.model.model.Gear;
import fi.relex.model.model.Node;
import fi.relex.model.model.PlayerId;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * State of a player: location, hit points, current gear and how many stops a player has made in the current curve
 */
@ApiModel(description = "State of a player: location, hit points, current gear and how many stops a player has made in the current curve")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-13T23:19:30.736+03:00")
public class PlayerState {
  @SerializedName("playerId")
  private String playerId = null;

  @SerializedName("gear")
  private Integer gear = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    START("START"),
    
    STRAIGHT("STRAIGHT"),
    
    CURVE_1("CURVE_1"),
    
    CURVE_2("CURVE_2"),
    
    CURVE_3("CURVE_3"),
    
    FINISH("FINISH");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("nodeId")
  private Integer nodeId = null;

  @SerializedName("hitpoints")
  private Integer hitpoints = null;

  @SerializedName("stops")
  private Integer stops = null;

  @SerializedName("leeway")
  private Integer leeway = null;

  public PlayerState playerId(String playerId) {
    this.playerId = playerId;
    return this;
  }

   /**
   * Get playerId
   * @return playerId
  **/
  @ApiModelProperty(required = true, value = "")
  public String getPlayerId() {
    return playerId;
  }

  public void setPlayerId(String playerId) {
    this.playerId = playerId;
  }

  public PlayerState gear(Integer gear) {
    this.gear = gear;
    return this;
  }

   /**
   * Get gear
   * @return gear
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getGear() {
    return gear;
  }

  public void setGear(Integer gear) {
    this.gear = gear;
  }

  public PlayerState type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(required = true, value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public PlayerState nodeId(Integer nodeId) {
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getNodeId() {
    return nodeId;
  }

  public void setNodeId(Integer nodeId) {
    this.nodeId = nodeId;
  }

  public PlayerState hitpoints(Integer hitpoints) {
    this.hitpoints = hitpoints;
    return this;
  }

   /**
   * Remaining hitpoints of the player.
   * minimum: 0
   * @return hitpoints
  **/
  @ApiModelProperty(required = true, value = "Remaining hitpoints of the player.")
  public Integer getHitpoints() {
    return hitpoints;
  }

  public void setHitpoints(Integer hitpoints) {
    this.hitpoints = hitpoints;
  }

  public PlayerState stops(Integer stops) {
    this.stops = stops;
    return this;
  }

   /**
   * The amount of stops the player has made in the current curve or zero.
   * minimum: 0
   * @return stops
  **/
  @ApiModelProperty(required = true, value = "The amount of stops the player has made in the current curve or zero.")
  public Integer getStops() {
    return stops;
  }

  public void setStops(Integer stops) {
    this.stops = stops;
  }

  public PlayerState leeway(Integer leeway) {
    this.leeway = leeway;
    return this;
  }

   /**
   * The number of milliseconds the player can miss the time limits for the rest of the game.
   * minimum: 0
   * @return leeway
  **/
  @ApiModelProperty(required = true, value = "The number of milliseconds the player can miss the time limits for the rest of the game.")
  public Integer getLeeway() {
    return leeway;
  }

  public void setLeeway(Integer leeway) {
    this.leeway = leeway;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerState playerState = (PlayerState) o;
    return Objects.equals(this.playerId, playerState.playerId) &&
        Objects.equals(this.gear, playerState.gear) &&
        Objects.equals(this.type, playerState.type) &&
        Objects.equals(this.nodeId, playerState.nodeId) &&
        Objects.equals(this.hitpoints, playerState.hitpoints) &&
        Objects.equals(this.stops, playerState.stops) &&
        Objects.equals(this.leeway, playerState.leeway);
  }

  @Override
  public int hashCode() {
    return Objects.hash(playerId, gear, type, nodeId, hitpoints, stops, leeway);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerState {\n");
    
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    gear: ").append(toIndentedString(gear)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    hitpoints: ").append(toIndentedString(hitpoints)).append("\n");
    sb.append("    stops: ").append(toIndentedString(stops)).append("\n");
    sb.append("    leeway: ").append(toIndentedString(leeway)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

