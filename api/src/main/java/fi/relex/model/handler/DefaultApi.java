/*
 * Formula D
 * Simple API for a Formula D AI server.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package fi.relex.model.handler;

import fi.relex.model.invoker.ApiCallback;
import fi.relex.model.invoker.ApiClient;
import fi.relex.model.invoker.ApiException;
import fi.relex.model.invoker.ApiResponse;
import fi.relex.model.invoker.Configuration;
import fi.relex.model.invoker.Pair;
import fi.relex.model.invoker.ProgressRequestBody;
import fi.relex.model.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fi.relex.model.model.GameState;
import fi.relex.model.model.Gear;
import fi.relex.model.model.Moves;
import fi.relex.model.model.NameAtStart;
import fi.relex.model.model.SelectedIndex;
import fi.relex.model.model.Track;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for selectGear
     * @param gameState Identifier of the current game and state of all players who are not finished or stopped (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call selectGearCall(GameState gameState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = gameState;

        // create path and map variables
        String localVarPath = "/select_gear";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call selectGearValidateBeforeCall(GameState gameState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'gameState' is set
        if (gameState == null) {
            throw new ApiException("Missing the required parameter 'gameState' when calling selectGear(Async)");
        }
        

        com.squareup.okhttp.Call call = selectGearCall(gameState, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns gear for the next dice roll, based on the provided game state
     * @param gameState Identifier of the current game and state of all players who are not finished or stopped (required)
     * @return Gear
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Gear selectGear(GameState gameState) throws ApiException {
        ApiResponse<Gear> resp = selectGearWithHttpInfo(gameState);
        return resp.getData();
    }

    /**
     * 
     * Returns gear for the next dice roll, based on the provided game state
     * @param gameState Identifier of the current game and state of all players who are not finished or stopped (required)
     * @return ApiResponse&lt;Gear&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Gear> selectGearWithHttpInfo(GameState gameState) throws ApiException {
        com.squareup.okhttp.Call call = selectGearValidateBeforeCall(gameState, null, null);
        Type localVarReturnType = new TypeToken<Gear>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns gear for the next dice roll, based on the provided game state
     * @param gameState Identifier of the current game and state of all players who are not finished or stopped (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call selectGearAsync(GameState gameState, final ApiCallback<Gear> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = selectGearValidateBeforeCall(gameState, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Gear>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for selectMove
     * @param moves Identifier of the current game and all valid moves available to the player (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call selectMoveCall(Moves moves, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = moves;

        // create path and map variables
        String localVarPath = "/select_move";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call selectMoveValidateBeforeCall(Moves moves, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'moves' is set
        if (moves == null) {
            throw new ApiException("Missing the required parameter 'moves' when calling selectMove(Async)");
        }
        

        com.squareup.okhttp.Call call = selectMoveCall(moves, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns chosen move as an index to the given list of valid moves
     * @param moves Identifier of the current game and all valid moves available to the player (required)
     * @return SelectedIndex
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SelectedIndex selectMove(Moves moves) throws ApiException {
        ApiResponse<SelectedIndex> resp = selectMoveWithHttpInfo(moves);
        return resp.getData();
    }

    /**
     * 
     * Returns chosen move as an index to the given list of valid moves
     * @param moves Identifier of the current game and all valid moves available to the player (required)
     * @return ApiResponse&lt;SelectedIndex&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SelectedIndex> selectMoveWithHttpInfo(Moves moves) throws ApiException {
        com.squareup.okhttp.Call call = selectMoveValidateBeforeCall(moves, null, null);
        Type localVarReturnType = new TypeToken<SelectedIndex>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns chosen move as an index to the given list of valid moves
     * @param moves Identifier of the current game and all valid moves available to the player (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call selectMoveAsync(Moves moves, final ApiCallback<SelectedIndex> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = selectMoveValidateBeforeCall(moves, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SelectedIndex>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startGame
     * @param track  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startGameCall(Track track, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = track;

        // create path and map variables
        String localVarPath = "/initialize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startGameValidateBeforeCall(Track track, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'track' is set
        if (track == null) {
            throw new ApiException("Missing the required parameter 'track' when calling startGame(Async)");
        }
        

        com.squareup.okhttp.Call call = startGameCall(track, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Starts a new game with the given game identifier on the given track and assigns also player identifier
     * @param track  (required)
     * @return NameAtStart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameAtStart startGame(Track track) throws ApiException {
        ApiResponse<NameAtStart> resp = startGameWithHttpInfo(track);
        return resp.getData();
    }

    /**
     * 
     * Starts a new game with the given game identifier on the given track and assigns also player identifier
     * @param track  (required)
     * @return ApiResponse&lt;NameAtStart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameAtStart> startGameWithHttpInfo(Track track) throws ApiException {
        com.squareup.okhttp.Call call = startGameValidateBeforeCall(track, null, null);
        Type localVarReturnType = new TypeToken<NameAtStart>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts a new game with the given game identifier on the given track and assigns also player identifier
     * @param track  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startGameAsync(Track track, final ApiCallback<NameAtStart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startGameValidateBeforeCall(track, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameAtStart>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
