swagger: "2.0"
info:
  title: Formula D
  description: Simple API for a Formula D AI server.
  version: "1.0.0"
host: localhost:1277
basePath: /v1
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /initialize:
    post:
      operationId: StartGame
      description: "Starts a new game with the given game identifier on the given track and assigns also player identifier"
      parameters:
        - $ref: '#/parameters/TrackParam'

      responses:
        '200':
          description: "Name of the player"
          schema:
            $ref: '#/definitions/NameAtStart'

  /select_gear:
    post:
      operationId: SelectGear
      description: "Returns gear for the next dice roll, based on the provided game state"
      parameters:
        - $ref: '#/parameters/GameState'
      responses:
        '200':
          description: "Selected gear. Must not be 0"
          schema:
            $ref: '#/definitions/Gear'

  /select_move:
    post:
      operationId: SelectMove
      description: "Returns chosen move as an index to the given list of valid moves"
      parameters:
        - $ref: '#/parameters/ValidMoves'

      responses:
        '200':
          description: "Selected move as an index to the list of valid moves given as a parameter"
          schema:
            $ref: '#/definitions/SelectedIndex'

definitions:
  GameId:
    description: "Unique identifier for the game"
    type: object
    properties:
      gameId:
        type: string
        minLength: 1
    required:
      - gameId
  Gear:
    description: "Gear of the car. It can be be 0 in the start but 0 can never be chosen."
    properties:
      gear:
        type: integer
        enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
    required:
      - gear
  Edge:
    properties:
      start:
        $ref: '#/definitions/Node'
      end:
        $ref: '#/definitions/Node'
    required:
      - start
      - end
  NodeId:
    description: "Unique identifier for the node"
    properties:
      nodeId:
        type: integer
        format: int32
    required:
      - nodeId
  Node:
    allOf:
      - $ref: '#/definitions/TileType'
      - $ref: '#/definitions/NodeId'
  TileType:
    description: Type of a tile the node presents
    properties:
      'type':
        type: string
        enum:
          - 'START'
          - 'STRAIGHT'
          - 'CURVE_1'
          - 'CURVE_2'
          - 'CURVE_3'
          - 'FINISH'
    required:
      - type
  PlayerState:
    description: "State of a player: location, hit points, current gear and how many stops a player has made in the current curve"
    allOf:
      - $ref: '#/definitions/PlayerId'
      - $ref: '#/definitions/Gear'
      - $ref: '#/definitions/Node'
      - type: object
        properties:
          hitpoints:
            type: integer
            format: int32
            description: "Remaining hitpoints of the player."
            minimum: 0
          stops:
            type: integer
            format: int32
            description: "The amount of stops the player has made in the current curve or zero."
            minimum: 0
          leeway:
            type: integer
            format: int32
            description: "The number of milliseconds the player can miss the time limits for the rest of the game."
            minimum: 0
        required:
          - hitpoints
          - stops
          - leeway
  PlayerId:
    type: object
    description: "Unique identifer for the player"
    properties:
      playerId:
        type: string
    required:
      - playerId
  ValidMove:
    type: object
    description: "A valid move a player can take containing the identifier of the node and what repercussions there will be for choosing that"
    allOf:
      - $ref: '#/definitions/Node'
      - type: object
        properties:
          overshoot:
            type: integer
            format: int32
            minimum: 0
          braking:
            type: integer
            format: int32
            minimum: 0
        required:
          - overshoot
          - braking
  NameAtStart:
    type: object
    properties:
      name:
        type: string
    required:
      - name
    example:
      name: "Jarkko's AI"
  SelectedIndex:
    type: object
    description: "Index to the provided list of valid moves, to indicate selection of the corresponding move"
    properties:
      index:
        type: integer
        format: int32
        minimum: 0
    required:
      - index

parameters:
  TrackParam:
    in: body
    name: track
    required: true
    schema:
      type: object
      properties:
        player:
          $ref: '#/definitions/PlayerId'
        game:
          $ref: "#/definitions/GameId"
        track:
          type: object
          description: 'Track as a graph'
          properties:
            nodes:
              type: array
              items:
                $ref: '#/definitions/Node'
            edges:
              type: array
              items:
                $ref: '#/definitions/Edge'
          required:
            - nodes
            - edges
      required:
      - player
      - game
      - track

  GameState:
    in: body
    name: gameState
    required: true
    description: "Identifier of the current game and state of all players who are not finished or stopped"
    schema:
      type: object
      properties:
        game:
          $ref: '#/definitions/GameId'
        players:
          type: array
          items:
            $ref: '#/definitions/PlayerState'
      required:
        - game
        - players
  ValidMoves:
    in: body
    name: moves
    required: true
    description: "Identifier of the current game and all valid moves available to the player"
    schema:
      type: object
      properties:
        game:
          $ref: '#/definitions/GameId'
        moves:
          type: array
          items:
            $ref: '#/definitions/ValidMove'
